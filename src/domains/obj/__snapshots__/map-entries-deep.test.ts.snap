// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`arrays > mapEntriesDeep({ numbers: [ 1, 2, 3 ], strings: [ 'a', 'b' ] }, () => void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  numbers: [ 1, 2, 3 ],
  strings: [ 'a', 'b' ]
}
────────────────────────────────────────────────────
() => void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  numbers: [ 1, 2, 3 ],
  strings: [ 'a', 'b' ]
}
╚══════════════════════════════════════════════════╝"
`;

exports[`arrays > mapEntriesDeep({ users: [ { $id: 1, $name: 'alice' }, { $id: 2, $name: 'bob' } ] }, (key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  users: [
    {
      $id: 1,
      $name: 'alice'
    },
    {
      $id: 2,
      $name: 'bob'
    }
  ]
}
────────────────────────────────────────────────────
(key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  users: [
    {
      id: 1,
      name: 'alice'
    },
    {
      id: 2,
      name: 'bob'
    }
  ]
}
╚══════════════════════════════════════════════════╝"
`;

exports[`combined transformations > mapEntriesDeep({ $name: 'alice', age: 25, $email: 'alice@example.com' }, (key, value) => { if (key.startsWith("$")) { return { key: key.slice(1), value: ...) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  $name: 'alice',
  age: 25,
  $email: 'alice@example.com'
}
────────────────────────────────────────────────────
(key, value) => {
  if (key.startsWith("$")) {
    return { key: key.slice(1), value: typeof value === "string" ? value.toUpperCase() : value };
  };
  return void 0;
}
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  name: 'ALICE',
  age: 25,
  email: 'ALICE@EXAMPLE.COM'
}
╚══════════════════════════════════════════════════╝"
`;

exports[`empty objects > mapEntriesDeep({}, (key, value) => ({ key: key.toUpperCase(), value })) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{}
────────────────────────────────────────────────────
(key, value) => ({ key: key.toUpperCase(), value })
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{}
╚══════════════════════════════════════════════════╝"
`;

exports[`key transformations > mapEntriesDeep({ $a: { $b: { $c: { $d: 'deep' } } } }, (key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  $a: {
    $b: {
      $c: {
        $d: 'deep'
      }
    }
  }
}
────────────────────────────────────────────────────
(key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  a: {
    b: {
      c: {
        d: 'deep'
      }
    }
  }
}
╚══════════════════════════════════════════════════╝"
`;

exports[`key transformations > mapEntriesDeep({ $foo: 'a', bar: 'b', $baz: { nested: 'c' } }, (key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  $foo: 'a',
  bar: 'b',
  $baz: {
    nested: 'c'
  }
}
────────────────────────────────────────────────────
(key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  foo: 'a',
  bar: 'b',
  baz: {
    nested: 'c'
  }
}
╚══════════════════════════════════════════════════╝"
`;

exports[`key transformations > mapEntriesDeep({ $foo: 'bar', $baz: { $nested: 'value' } }, (key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  $foo: 'bar',
  $baz: {
    $nested: 'value'
  }
}
────────────────────────────────────────────────────
(key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  foo: 'bar',
  baz: {
    nested: 'value'
  }
}
╚══════════════════════════════════════════════════╝"
`;

exports[`mixed structures > mapEntriesDeep({ str: 'hello', arr: [ 1, 'two', { nested: 'obj' } ], obj: { inner: 'value' } }, (key, value) => typeof value === "string" ? { key, value: value.toUpperCase() } ...) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  str: 'hello',
  arr: [
    1,
    'two',
    {
      nested: 'obj'
    }
  ],
  obj: {
    inner: 'value'
  }
}
────────────────────────────────────────────────────
(key, value) => typeof value === "string" ? { key, value: value.toUpperCase() } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  str: 'HELLO',
  arr: [
    1,
    'two',
    {
      nested: 'OBJ'
    }
  ],
  obj: {
    inner: 'VALUE'
  }
}
╚══════════════════════════════════════════════════╝"
`;

exports[`non-plain objects (Date, RegExp, etc.) > mapEntriesDeep({ $pattern: /test/i }, (key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  $pattern: /test/i
}
────────────────────────────────────────────────────
(key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  pattern: /test/i
}
╚══════════════════════════════════════════════════╝"
`;

exports[`non-plain objects (Date, RegExp, etc.) > mapEntriesDeep({ nested: { $regex: /[a-z]+/ } }, (key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  nested: {
    $regex: /[a-z]+/
  }
}
────────────────────────────────────────────────────
(key, value) => key.startsWith("$") ? { key: key.slice(1), value } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  nested: {
    regex: /[a-z]+/
  }
}
╚══════════════════════════════════════════════════╝"
`;

exports[`primitives > mapEntriesDeep('hello', () => void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
hello
────────────────────────────────────────────────────
() => void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS STRING
hello
╚══════════════════════════════════════════════════╝"
`;

exports[`primitives > mapEntriesDeep(42, () => void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
42
────────────────────────────────────────────────────
() => void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS NUMBER
42
╚══════════════════════════════════════════════════╝"
`;

exports[`primitives > mapEntriesDeep(null, () => void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
null
────────────────────────────────────────────────────
() => void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS NULL
null
╚══════════════════════════════════════════════════╝"
`;

exports[`primitives > mapEntriesDeep(true, () => void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
true
────────────────────────────────────────────────────
() => void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS BOOLEAN
true
╚══════════════════════════════════════════════════╝"
`;

exports[`selective transformations > mapEntriesDeep({ keep: 'me', transform: 'this' }, (key, value) => key === "transform" ? { key, value: "TRANSFORMED" } : void 0) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  keep: 'me',
  transform: 'this'
}
────────────────────────────────────────────────────
(key, value) => key === "transform" ? { key, value: "TRANSFORMED" } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  keep: 'me',
  transform: 'TRANSFORMED'
}
╚══════════════════════════════════════════════════╝"
`;

exports[`value transformations > mapEntriesDeep({ name: 'alice', address: { city: 'nyc' } }, (key, value) => typeof value === "string" ? { key, value: value.toUpperCase() } ...) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  name: 'alice',
  address: {
    city: 'nyc'
  }
}
────────────────────────────────────────────────────
(key, value) => typeof value === "string" ? { key, value: value.toUpperCase() } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  name: 'ALICE',
  address: {
    city: 'NYC'
  }
}
╚══════════════════════════════════════════════════╝"
`;

exports[`value transformations > mapEntriesDeep({ str: 'hi', num: 42, bool: true, nil: null }, (key, value) => typeof value === "string" ? { key, value: value.toUpperCase() } ...) 1`] = `
"
╔══════════════════════════════════════════════════╗ GIVEN ARGUMENTS
{
  str: 'hi',
  num: 42,
  bool: true,
  nil: null
}
────────────────────────────────────────────────────
(key, value) => typeof value === "string" ? { key, value: value.toUpperCase() } : void 0
╠══════════════════════════════════════════════════╣ THEN RETURNS OBJECT
{
  str: 'HI',
  num: 42,
  bool: true,
  nil: null
}
╚══════════════════════════════════════════════════╝"
`;
