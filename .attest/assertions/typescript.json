{
  "src/utils/ts/err.test.ts": [
    {
      "location": {
        "start": {
          "line": 6,
          "char": 3
        },
        "end": {
          "line": 6,
          "char": 39
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"msg\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 13,
          "char": 3
        },
        "end": {
          "line": 13,
          "char": 59
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"msg\"; a_____________: \"a\"; b_____________: \"b\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 22,
          "char": 3
        },
        "end": {
          "line": 22,
          "char": 75
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"msg\"; a_____________: \"a\"; b_____________: \"b\"; c_____________: \"c\"; d_____________: \"d\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 34,
          "char": 3
        },
        "end": {
          "line": 34,
          "char": 73
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"msg\"; veryLongKeyName: \"x\"; s_____________: \"y\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    }
  ],
  "src/utils/ts/assert/$$.test.ts": [
    {
      "location": {
        "start": {
          "line": 31,
          "char": 3
        },
        "end": {
          "line": 31,
          "char": 48
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED and ACTUAL are disjoint\"; expected______: string; actual________: number; tip___________: \"Types share no values\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 43,
          "char": 3
        },
        "end": {
          "line": 43,
          "char": 38
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: A<{}>; actual________: B; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 55,
          "char": 3
        },
        "end": {
          "line": 55,
          "char": 38
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: A; actual________: B; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 67,
          "char": 3
        },
        "end": {
          "line": 67,
          "char": 38
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: E; actual________: A; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 79,
          "char": 3
        },
        "end": {
          "line": 79,
          "char": 38
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"ACTUAL is supertype of EXPECTED\"; expected______: E; actual________: A; tip___________: \"ACTUAL is wider than EXPECTED\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 91,
          "char": 3
        },
        "end": {
          "line": 91,
          "char": 12
        }
      },
      "args": [
        {
          "type": "[{ ERROR_________: \"EXPECTED and ACTUAL are disjoint\"; expected______: string; actual________: 42; tip___________: \"Types share no values\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }]",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 103,
          "char": 3
        },
        "end": {
          "line": 103,
          "char": 13
        }
      },
      "args": [
        {
          "type": "[{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: { a: string; }; actual________: { a: number; b: number; }; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }]",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 125,
          "char": 3
        },
        "end": {
          "line": 125,
          "char": 18
        }
      },
      "args": [
        {
          "type": "(actual: 42, error: \"⚠ Types are not exactly equal\", expected: string) => void",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 132,
          "char": 3
        },
        "end": {
          "line": 132,
          "char": 20
        }
      },
      "args": [
        {
          "type": "(actual: string) => void",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 136,
          "char": 3
        },
        "end": {
          "line": 136,
          "char": 25
        }
      },
      "args": [
        {
          "type": "(actual: CB, error: \"⚠ Types are not exactly equal\", expected: CA) => void",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 147,
          "char": 3
        },
        "end": {
          "line": 147,
          "char": 13
        }
      },
      "args": [
        {
          "type": "[actual: { ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: { id: string; user: { name: string; age: number; }; tags: string[]; }; actual________: { id: string; user: { name: string; age: string; }; tags: string[]; extra: boolean; }; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }]",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 176,
          "char": 3
        },
        "end": {
          "line": 176,
          "char": 18
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Custom validation failed\"; expected______: { a: string; }; actual________: { a: number; }; location______: \"src/file.ts:42\"; hint__________: \"Use string\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 188,
          "char": 3
        },
        "end": {
          "line": 188,
          "char": 18
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Type mismatch\"; expected______: string; actual________: number; tip___________: \"Use string\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 204,
          "char": 3
        },
        "end": {
          "line": 204,
          "char": 18
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Type mismatch\"; expected______: string; actual________: number; tip_a_________: \"Use string\"; tip_b_________: \"Check docs\"; tip_c_________: \"See example\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 220,
          "char": 3
        },
        "end": {
          "line": 220,
          "char": 38
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: A; actual________: B; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 232,
          "char": 3
        },
        "end": {
          "line": 232,
          "char": 38
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: A; actual________: B; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 244,
          "char": 3
        },
        "end": {
          "line": 244,
          "char": 47
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"ACTUAL does not extend EXPECTED\"; expected______: \"hello\"; actual________: string; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 267,
          "char": 3
        },
        "end": {
          "line": 267,
          "char": 48
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"ACTUAL extends EXPECTED but should not\"; expected______: string; actual________: \"hello\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 278,
          "char": 3
        },
        "end": {
          "line": 278,
          "char": 48
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED and ACTUAL are disjoint\"; expected______: string; actual________: number; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 284,
          "char": 3
        },
        "end": {
          "line": 284,
          "char": 49
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"ACTUAL extends EXPECTED but not vice versa\"; expected______: string; actual________: \"hello\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 290,
          "char": 3
        },
        "end": {
          "line": 290,
          "char": 49
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED extends ACTUAL but not vice versa\"; expected______: \"hello\"; actual________: string; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 319,
          "char": 3
        },
        "end": {
          "line": 319,
          "char": 65
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED only overlaps with ACTUAL\"; expected______: [string, string]; actual________: [a: number, b: number]; tip___________: \"Types share some values but differ\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 330,
          "char": 3
        },
        "end": {
          "line": 330,
          "char": 65
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED and ACTUAL are disjoint\"; expected______: string; actual________: number; tip___________: \"Types share no values\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 341,
          "char": 3
        },
        "end": {
          "line": 341,
          "char": 53
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"EXPECTED and ACTUAL are disjoint\"; expected______: number; actual________: string; tip___________: \"Types share no values\"; HIERARCHY_____: readonly [\"root\", \"assert\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 354,
          "char": 3
        },
        "end": {
          "line": 354,
          "char": 27
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract array from incompatible type\"; expected______: \"Type must extend array (readonly any[])\"; actual________: string; attempted_____: \"array extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 365,
          "char": 3
        },
        "end": {
          "line": 365,
          "char": 27
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract awaited from incompatible type\"; expected______: \"Type must extend PromiseLike<any>\"; actual________: string; attempted_____: \"awaited extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 376,
          "char": 3
        },
        "end": {
          "line": 376,
          "char": 27
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract parameters from incompatible type\"; expected______: \"Type must extend function ((...args: any) => any)\"; actual________: string; attempted_____: \"parameters extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 387,
          "char": 3
        },
        "end": {
          "line": 387,
          "char": 27
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract returned from incompatible type\"; expected______: \"Type must extend function ((...args: any) => any)\"; actual________: string; attempted_____: \"returned extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 405,
          "char": 3
        },
        "end": {
          "line": 405,
          "char": 23
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract awaited from incompatible type\"; expected______: \"Type must extend PromiseLike<any>\"; actual________: string; attempted_____: \"awaited extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 421,
          "char": 3
        },
        "end": {
          "line": 421,
          "char": 23
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract array from incompatible type\"; expected______: \"Type must extend array (readonly any[])\"; actual________: string; attempted_____: \"array extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 439,
          "char": 3
        },
        "end": {
          "line": 439,
          "char": 23
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract awaited from incompatible type\"; expected______: \"Type must extend PromiseLike<any>\"; actual________: \"hello\"; attempted_____: \"awaited extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 455,
          "char": 3
        },
        "end": {
          "line": 455,
          "char": 23
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract array from incompatible type\"; expected______: \"Type must extend array (readonly any[])\"; actual________: \"hello\"; attempted_____: \"array extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    },
    {
      "location": {
        "start": {
          "line": 471,
          "char": 3
        },
        "end": {
          "line": 471,
          "char": 23
        }
      },
      "args": [
        {
          "type": "{ ERROR_________: \"Cannot extract returned from incompatible type\"; expected______: \"Type must extend function ((...args: any) => any)\"; actual________: \"hello\"; attempted_____: \"returned extractor\"; HIERARCHY_____: readonly [\"root\", ...string[]]; }",
          "relationships": {
            "args": [
              "equality"
            ],
            "typeArgs": []
          }
        }
      ],
      "typeArgs": [],
      "errors": [],
      "completions": {}
    }
  ]
}
